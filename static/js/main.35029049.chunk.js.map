{"version":3,"sources":["components/Slider.js","assets/constants/appConstants.js","components/Imager.js","components/ButtonSubmit.js","assets/constants/apiConstants.js","App.js","serviceWorker.js","index.js"],"names":["RangeHeader","styled","div","StyledRange","StyledRangeProgress","StyledThumb","getPercentage","current","min","max","Slider","initial","formatFn","onChange","initialPercentage","rangeRef","useRef","rangeProgressRef","thumbRef","currentRef","diff","handleUpdate","useCallback","value","percentage","style","left","getLeft","width","getWidth","textContent","handleMouseMove","event","newX","clientX","getBoundingClientRect","end","offsetWidth","newPercentage","newValue","getValue","handleMouseUp","document","removeEventListener","useEffect","id","name","ref","onMouseDown","addEventListener","defaultProps","number","toFixed","statusEnum","Object","freeze","FILE_DETECTED","DROP_HERE","DROP","DONE","PREVIEW","Imager","scale","status","onDragEnter","onDrop","onDragOver","preview","onAbortClick","className","indexOf","onDragLeave","backgroundImage","clipPath","Number","onClick","StyledButtonSubmit","button","ButtonSubmit","uploading","type","disabled","UPLOAD_IMAGE_URL","App","useState","setStatus","setPreview","setPercentage","enableDragDrop","setEnableDragDrop","setUploading","setScale","FormData","payload","setPayload","stopPropagation","preventDefault","dataTransfer","files","reader","FileReader","onload","e","target","result","readAsDataURL","append","window","innerWidth","xhr","XMLHttpRequest","upload","onprogress","done","position","loaded","total","totalSize","perc","Math","floor","open","onreadystatechange","oEvent","readyState","console","log","responseText","res","JSON","parse","fileUrl","statusText","send","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35029049.chunk.js","sourcesContent":["import React, { useRef, useCallback, useEffect } from 'react';\r\nimport PropTypes from \"prop-types\"\r\nimport styled from 'styled-components';\r\n\r\nconst RangeHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-bottom: 5px\r\n`;\r\n\r\nconst StyledRange = styled.div`\r\n  position: relative;\r\n  border-radius: 3px;\r\n  background: #dddddd;\r\n  height: 15px;\r\n`;\r\n\r\nconst StyledRangeProgress = styled.div`\r\n  border-radius: 3px;\r\n  position: absolute;\r\n  height: 100%;\r\n  opacity: 0.5;\r\n  background: rgb(102, 202, 249);\r\n`;\r\n\r\nconst StyledThumb = styled.div`\r\n  width: 10px;\r\n  height: 25px;\r\n  border-radius: 3px;\r\n  position: relative;\r\n  top: -5px;\r\n  opacity: 0.5;\r\n  background: rgb(102, 202, 249);\r\n  cursor: pointer;\r\n  &:active {\r\n    background: rgba(15, 127, 255);\r\n  }\r\n`;\r\n\r\nconst getPercentage = (current, min, max) =>\r\n  ((current - min) / (max - min)) * 100;\r\n\r\nconst getValue = (percentage, min, max) =>\r\n  ((max - min) / 100) * percentage + min;\r\n\r\nconst getLeft = percentage => `calc(${percentage}% - 5px)`;\r\n\r\nconst getWidth = percentage => `${percentage}%`;\r\n\r\nconst formatFn = (number = 0) => number.toFixed(0)\r\n\r\n\r\nconst Slider = ({\r\n  initial,\r\n  min,\r\n  max,\r\n  formatFn,\r\n  onChange,\r\n}) => {\r\n  const initialPercentage = getPercentage(initial, min, max);\r\n\r\n  const rangeRef = useRef();\r\n  const rangeProgressRef = useRef();\r\n  const thumbRef = useRef();\r\n  const currentRef = useRef();\r\n\r\n  const diff = useRef();\r\n\r\n  const handleUpdate = useCallback(\r\n    (value, percentage) => {\r\n      thumbRef.current.style.left = getLeft(percentage);\r\n      rangeProgressRef.current.style.width = getWidth(percentage);\r\n      currentRef.current.textContent = formatFn(value);\r\n    },\r\n    [formatFn]\r\n  );\r\n\r\n  const handleMouseMove = event => {\r\n    let newX =\r\n      event.clientX -\r\n      diff.current -\r\n      rangeRef.current.getBoundingClientRect().left;\r\n\r\n    const end =\r\n      rangeRef.current.offsetWidth - thumbRef.current.offsetWidth;\r\n\r\n    const start = 0;\r\n\r\n    if (newX < start) {\r\n      newX = 0;\r\n    }\r\n\r\n    if (newX > end) {\r\n      newX = end;\r\n    }\r\n\r\n    const newPercentage = getPercentage(newX, start, end);\r\n    const newValue = getValue(newPercentage, min, max);\r\n\r\n    handleUpdate(newValue, newPercentage);\r\n\r\n    onChange(newValue);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    document.removeEventListener('mouseup', handleMouseUp);\r\n    document.removeEventListener('mousemove', handleMouseMove);\r\n  };\r\n\r\n  const handleMouseDown = event => {\r\n    diff.current =\r\n      event.clientX - thumbRef.current.getBoundingClientRect().left;\r\n\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleUpdate(initial, initialPercentage);\r\n  }, [initial, initialPercentage, handleUpdate]);\r\n\r\n  return (\r\n    <>\r\n      <RangeHeader id=\"header-slider\" name=\"header-slider\">\r\n        <div>{formatFn(min)}</div>\r\n        <div>\r\n          <strong ref={currentRef} />\r\n          &nbsp;/&nbsp;\r\n          {formatFn(max)}\r\n        </div>\r\n      </RangeHeader>\r\n      <StyledRange\r\n        id=\"styled-slider\"\r\n        name=\"styled-slider\"\r\n        ref={rangeRef}\r\n      >\r\n        <StyledRangeProgress\r\n          id=\"progress-slider\"\r\n          name=\"progress-slider\"\r\n          ref={rangeProgressRef}\r\n        />\r\n        <StyledThumb\r\n          id=\"thumb-slider\"\r\n          name=\"thumb-slider\"\r\n          ref={thumbRef}\r\n          onMouseDown={handleMouseDown}\r\n        />\r\n      </StyledRange>\r\n    </>\r\n  );\r\n};\r\n\r\nSlider.propTypes = {\r\n  formatFn: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  initial: PropTypes.number,\r\n  min: PropTypes.number,\r\n  max: PropTypes.number\r\n}\r\n\r\nSlider.defaultProps = {\r\n  formatFn: formatFn,\r\n  onChange: () => { },\r\n  initial: 0,\r\n  min: 0,\r\n  max: 100,\r\n}\r\n\r\nexport default Slider;","const FILE_DETECTED = 'File Detected';\r\nconst DROP_HERE = 'Drop Here';\r\nconst DROP = 'Drop';\r\nconst PREVIEW = 'Preview';\r\nconst DONE = 'Done';\r\n\r\nexport const EMPTY_STRING = '';\r\n\r\nexport const statusEnum = Object.freeze({\r\n  FILE_DETECTED,\r\n  DROP_HERE,\r\n  DROP,\r\n  DONE,\r\n  PREVIEW\r\n});","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport '../assets/css/imager.css';\r\nimport { statusEnum } from '../assets/constants/appConstants';\r\n\r\nconst { DROP, DONE, PREVIEW } = statusEnum;\r\n\r\nconst Imager = ({\r\n  scale,\r\n  status,\r\n  onDragEnter,\r\n  onDrop,\r\n  onDragOver,\r\n  preview,\r\n  onAbortClick,\r\n  percentage\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{ width: `${scale * 0.8}%` }}\r\n      className={`DropArea ${status === DROP && 'Over'} \r\n      ${status.indexOf('%') > -1 || (status === DONE && 'Uploading')}`}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onDragLeave={onDragEnter}\r\n      id=\"imager\"\r\n      name=\"imager\"\r\n    >\r\n      <div\r\n        id=\"container-imager\"\r\n        name=\"container-imager\"\r\n        className={`ImageProgress ${preview && 'Show'}`}\r\n      >\r\n        <div\r\n          id=\"progress-imager\"\r\n          name=\"progress-imager\"\r\n          className={`ImageProgressImage ${status === DONE && 'Done'}`}\r\n          style={{ backgroundImage: `url(${preview})` }}\r\n        />\r\n        <div\r\n          id=\"upload-imager\"\r\n          name=\"upload-imager\"\r\n          className=\"ImageProgressUploaded\"\r\n          style={{\r\n            backgroundImage: `url(${preview})`,\r\n            clipPath: `inset(${100 - Number(percentage)}% 0 0 0)`\r\n          }}\r\n        />\r\n      </div>\r\n      <div\r\n        id=\"status-imager\"\r\n        name=\"status-imager\"\r\n        className={`Status ${status.indexOf('%') > -1 || (status === DONE && 'Uploading')}`}\r\n      >\r\n        {status}\r\n      </div>\r\n      {(status === PREVIEW || status === DONE) &&\r\n        <div\r\n          id=\"abort-imager\"\r\n          name=\"abort-imager\"\r\n          className=\"Abort\"\r\n          onClick={onAbortClick}\r\n        >\r\n          <span>&times;</span>\r\n        </div>}\r\n    </div >\r\n  )\r\n}\r\n\r\nImager.propTypes = {\r\n  scale: PropTypes.number,\r\n  status: PropTypes.string,\r\n  onDragEnter: PropTypes.func,\r\n  onDrop: PropTypes.func,\r\n  onDragOver: PropTypes.func,\r\n  onAbortClick: PropTypes.func,\r\n  preview: PropTypes.string,\r\n  percentage: PropTypes.number\r\n}\r\n\r\nexport default Imager\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from \"styled-components\";\r\nimport { statusEnum } from '../assets/constants/appConstants';\r\n\r\nconst StyledButtonSubmit = styled.button`\r\n  padding: 12px;\r\n  background: rgb(102, 202, 249);\r\n  border: 0;\r\n  color: white;\r\n  border-radius: 3px;\r\n  font-weight: 500;\r\n  font-size: 10pt;\r\n  cursor: pointer;\r\n  max-width: 130px;\r\n  &:hover {\r\n  background: rgba(15, 127, 255, 0.9);\r\n  color: white\r\n  };\r\n  &:disabled  {\r\n  background: #efefef;\r\n  color: lightgrey\r\n  };\r\n`;\r\n\r\n\r\nconst ButtonSubmit = ({ onClick, status, uploading }) => {\r\n  return (\r\n    <StyledButtonSubmit\r\n      id=\"button-submit\"\r\n      name=\"button-submit\"\r\n      type=\"submit\"\r\n      onClick={onClick}\r\n      disabled={status !== statusEnum.PREVIEW || uploading}\r\n    >\r\n      Upload image\r\n    </StyledButtonSubmit>\r\n\r\n  )\r\n}\r\n\r\nButtonSubmit.propTypes = {\r\n  onClick: PropTypes.func,\r\n  preview: PropTypes.string,\r\n  uploading: PropTypes.bool\r\n}\r\n\r\nexport default ButtonSubmit\r\n","export const BASE_URL = \"http://localhost:5000\";\r\n\r\nexport const UPLOAD_IMAGE_URL = `${BASE_URL}/api/upload/image`;","import React, { useState } from 'react';\r\nimport Slider from './components/Slider';\r\nimport Imager from './components/Imager';\r\nimport { statusEnum } from './assets/constants/appConstants';\r\nimport ButtonSubmit from './components/ButtonSubmit';\r\nimport { UPLOAD_IMAGE_URL } from './assets/constants/apiConstants';\r\n\r\n\r\nconst App = () => {\r\n  const [status, setStatus] = useState(statusEnum.DROP_HERE);\r\n  const [preview, setPreview] = useState(null);\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [enableDragDrop, setEnableDragDrop] = useState(true);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [scale, setScale] = useState(100);\r\n  const [payload, setPayload] = useState(new FormData());\r\n\r\n\r\n  const onDragEnter = event => {\r\n    if (enableDragDrop) {\r\n      setStatus(statusEnum.FILE_DETECTED);\r\n    }\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  const onDragLeave = event => {\r\n    if (enableDragDrop) {\r\n      setStatus(statusEnum.DROP_HERE);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  const onDragOver = event => {\r\n    if (enableDragDrop) {\r\n      setStatus(statusEnum.DROP);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n  const onDrop = event => {\r\n    const supportedFilesTypes = ['image/jpeg', 'image/png'];\r\n    const { type } = event.dataTransfer.files[0] || {};\r\n    if (supportedFilesTypes.indexOf(type) > -1 && enableDragDrop) {\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = e => setPreview(e.target.result);\r\n      reader.readAsDataURL(event.dataTransfer.files[0]);\r\n\r\n      // Create Form Data\r\n      const payload = new FormData();\r\n      payload.append('image', event.dataTransfer.files[0]);\r\n      payload.append('size', window.innerWidth)\r\n      setPayload(payload);\r\n      setStatus(statusEnum.PREVIEW)\r\n      setEnableDragDrop(false);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  const onAbortClick = () => {\r\n    setPreview(null);\r\n    setStatus(statusEnum.DROP_HERE);\r\n    setPercentage(0);\r\n    setPayload(new FormData());\r\n    setEnableDragDrop(true);\r\n  };\r\n\r\n  const doNothing = event => event.preventDefault();\r\n\r\n  const handleSubmit = () => {\r\n    setUploading(true);\r\n    // XHR - New XHR Request\r\n    const xhr = new XMLHttpRequest();\r\n\r\n    // XHR - Upload Progress\r\n    xhr.upload.onprogress = (e) => {\r\n      const done = e.position || e.loaded\r\n      const total = e.totalSize || e.total;\r\n      const perc = (Math.floor(done / total * 1000) / 10);\r\n      if (perc < 100) {\r\n        setStatus(`${perc}%`);\r\n      }\r\n      else {\r\n        setPreview(null);\r\n        setStatus('Loading...')\r\n      }\r\n      setPercentage(perc);\r\n    };\r\n\r\n    // XHR - Make Request  \r\n    xhr.open('POST', UPLOAD_IMAGE_URL);\r\n\r\n    xhr.onreadystatechange = function (oEvent) {\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.status === 200) {\r\n          console.log(xhr.responseText)\r\n          const res = JSON.parse(xhr.responseText);\r\n          setStatus(statusEnum.DONE);\r\n          setPreview(res.fileUrl)\r\n          setPercentage(0);\r\n          setUploading(false);\r\n\r\n        } else {\r\n          console.log(\"Error\", xhr.statusText);\r\n        }\r\n      }\r\n    };\r\n\r\n    xhr.send(payload);\r\n  };\r\n  const handleSlider = value => {\r\n    setScale(value)\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"App\"\r\n      onDragEnter={onDragEnter}\r\n      onDragLeave={onDragLeave}\r\n      onDragOver={doNothing}\r\n    >\r\n      <Imager\r\n        scale={scale}\r\n        status={status}\r\n        onDragEnter={onDragEnter}\r\n        onDrop={onDrop}\r\n        onDragOver={onDragOver}\r\n        preview={preview}\r\n        onAbortClick={onAbortClick}\r\n        percentage={percentage} />\r\n      <div className=\"slider\">\r\n        <Slider onChange={handleSlider} initial={100} min={5} max={100} />\r\n      </div>\r\n      <ButtonSubmit onClick={handleSubmit} status={status} uploading={uploading} />\r\n    </div>\r\n  );\r\n};\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}